import streamlit as st
import pandas as pd
import numpy as np
import torch
import torch.nn as nn
import joblib
import pickle

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ st.session_state.current_page
if 'current_page' not in st.session_state:
    st.session_state.current_page = "Data & Development"

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏•‡∏≤‡∏™ PlacementNN ‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö global
class PlacementNN(nn.Module):
    def __init__(self):
        super(PlacementNN, self).__init__()
        self.fc1 = nn.Linear(10, 128)
        self.dropout1 = nn.Dropout(0.3)
        self.fc2 = nn.Linear(128, 64)
        self.dropout2 = nn.Dropout(0.3)
        self.fc3 = nn.Linear(64, 32)
        self.dropout3 = nn.Dropout(0.3)
        self.fc4 = nn.Linear(32, 1)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.relu(self.fc1(x))
        x = self.dropout1(x)
        x = self.relu(self.fc2(x))
        x = self.dropout2(x)
        x = self.relu(self.fc3(x))
        x = self.dropout3(x)
        x = self.fc4(x)
        return x

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sub pages ‡πÉ‡∏ô Page 1
def subpage_main():
    st.header("‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ")
    st.markdown("""
        <style>
        .custom-text {
            line-height: 1.5;
            margin-bottom: 0.5rem;
            text-align: justify;
        }
        </style>
        <div class="custom-text">
            ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏∏‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó Tesla ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏õ‡∏µ 2010 ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á 2022 ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡πÇ‡∏î‡∏¢‡πÑ‡∏î‡πâ‡∏ô‡∏≥‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå Kaggle ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡∏ô‡∏≥‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î ‡πÇ‡∏î‡∏¢‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        </div>
    """, unsafe_allow_html=True)

def subpage_dataset():
    st.header("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Dataset")
    st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV")
    st.markdown("""
        <div class="custom-text">
            - Date ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô ‡∏õ‡∏µ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• <br>
            - Open ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô ‡∏ì ‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô <br>
            - High ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô ‡∏ì ‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô <br>
            - Low ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô ‡∏ì ‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô <br>
            - Close ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô ‡∏ì ‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô <br>
            - Adj Close ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏±‡∏Å‡∏Ñ‡πà‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß <br>
            - Volume ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏õ ‡∏ì ‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô <br>
        </div>
    """, unsafe_allow_html=True)
    
    st.markdown("<h3 style='margin-bottom: 0.5rem;'>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV</h3>", unsafe_allow_html=True)
    try:
        df = pd.read_csv('TSLA.csv')
        st.dataframe(df.head(100), height=300, use_container_width=True)
    except FileNotFoundError:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö TSLA.csv")

def subpage_dl():
    st.header("Development Model")
    st.write("Content about Deep Learning models")

def subpage_eval():
    st.header("Evaluation")
    st.write("Content about model evaluation techniques")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Page 1 (‡πÉ‡∏ä‡πâ Tabs)
def page1():
    st.title("Data & Development üî•")
    
    tab1, tab2, tab3, tab4 = st.tabs([
        "Main",
        "Dataset Info",
        "Development Model",
        "Evaluation"
    ])
    
    with tab1:
        subpage_main()
    with tab2:
        subpage_dataset()
    with tab3:
        subpage_dl()
    with tab4:
        subpage_eval()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Page 2
def page2():
    st.title("Machine Learning Models üíÄ")
    
    tab1, tab2 = st.tabs([
        "SVM Linear Model",
        "SVR Model"
    ])
    
    with tab1:
        st.header("SVM Linear Model")
        st.write("""
            ‡πÇ‡∏°‡πÄ‡∏î‡∏• SVM Linear ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ù‡∏∂‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô Tesla (TSLA.csv) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Year, Month, Day, Open, High, Low, Volume 
            ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î (Close) ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á
        """)
        
        try:
            with open('svm_linear_model.pkl', 'rb') as file:
                svm_model = pickle.load(file)
        except FileNotFoundError:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå svm_linear_model.pkl")
            svm_model = None
        
        st.subheader("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
        year = st.number_input("Year", min_value=2010, max_value=2025, value=2022, step=1, key="svm_year")
        month = st.number_input("Month", min_value=1, max_value=12, value=1, step=1, key="svm_month")
        day = st.number_input("Day", min_value=1, max_value=31, value=1, step=1, key="svm_day")
        open_price = st.number_input("Open Price", min_value=0.0, value=100.0, step=0.1, key="svm_open")
        high_price = st.number_input("High Price", min_value=0.0, value=110.0, step=0.1, key="svm_high")
        low_price = st.number_input("Low Price", min_value=0.0, value=90.0, step=0.1, key="svm_low")
        volume = st.number_input("Volume", min_value=0, value=100000, step=1000, key="svm_volume")
        
        if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ SVM Linear", key="svm_predict"):
            if svm_model:
                input_data = [[year, month, day, open_price, high_price, low_price, volume]]
                prediction = svm_model.predict(input_data)
                st.write(f"‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î): {prediction[0]:.2f}")
            else:
                st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î")

    with tab2:
        st.header("SVR Model")
        st.write("""
            ‡πÇ‡∏°‡πÄ‡∏î‡∏• SVR ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ù‡∏∂‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô Tesla (TSLA.csv) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Year, Month, Day, Open, High, Low, Volume 
            ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î (Close) ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡∏¥‡∏á‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì
        """)
        
        try:
            with open('svr_model.pkl', 'rb') as file:
                svr_model = pickle.load(file)
        except FileNotFoundError:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå svr_model.pkl")
            svr_model = None
        
        st.subheader("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
        year = st.number_input("Year", min_value=2010, max_value=2025, value=2022, step=1, key="svr_year")
        month = st.number_input("Month", min_value=1, max_value=12, value=1, step=1, key="svr_month")
        day = st.number_input("Day", min_value=1, max_value=31, value=1, step=1, key="svr_day")
        open_price = st.number_input("Open Price", min_value=0.0, value=100.0, step=0.1, key="svr_open")
        high_price = st.number_input("High Price", min_value=0.0, value=110.0, step=0.1, key="svr_high")
        low_price = st.number_input("Low Price", min_value=0.0, value=90.0, step=0.1, key="svr_low")
        volume = st.number_input("Volume", min_value=0, value=100000, step=1000, key="svr_volume")
        
        if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ SVR", key="svr_predict"):
            if svr_model:
                input_data = [[year, month, day, open_price, high_price, low_price, volume]]
                prediction = svr_model.predict(input_data)
                st.write(f"‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î): {prediction[0]:.2f}")
            else:
                st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Page 3
def page3():
    st.title("Placement Opportunities Predictor üò†")
    st.write("""
        ‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ù‡∏∂‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå CGPA, Internships, Projects, Workshops/Certifications, 
        AptitudeTestScore, SoftSkillsRating, ExtracurricularActivities, PlacementTraining, SSC_Marks, HSC_Marks 
        ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏á‡∏≤‡∏ô (Placed ‡∏´‡∏£‡∏∑‡∏≠ Not Placed)
    """)

    st.subheader("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
    cgpa = st.number_input("CGPA (‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏∞‡∏™‡∏°)", min_value=0.0, max_value=10.0, value=7.0, step=0.1, key="nn_cgpa")
    internships = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô (Internships)", min_value=0, max_value=10, value=1, step=1, key="nn_internships")
    projects = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå (Projects)", min_value=0, max_value=20, value=2, step=1, key="nn_projects")
    workshops = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Workshops/Certifications", min_value=0, max_value=20, value=3, step=1, key="nn_workshops")
    aptitude_score = st.number_input("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î (Aptitude Test Score)", min_value=0.0, max_value=100.0, value=70.0, step=1.0, key="nn_aptitude")
    soft_skills = st.number_input("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡πà‡∏≠‡∏ô (Soft Skills Rating)", min_value=0.0, max_value=10.0, value=7.0, step=0.1, key="nn_softskills")
    extracurricular = st.selectbox("‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ (Extracurricular Activities)", options=["No", "Yes"], key="nn_extracurricular")
    placement_training = st.selectbox("‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô (Placement Training)", options=["No", "Yes"], key="nn_training")
    ssc_marks = st.number_input("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô SSC (‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏ï‡πâ‡∏ô)", min_value=0.0, max_value=100.0, value=80.0, step=1.0, key="nn_ssc")
    hsc_marks = st.number_input("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô HSC (‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏õ‡∏•‡∏≤‡∏¢)", min_value=0.0, max_value=100.0, value=85.0, step=1.0, key="nn_hsc")

    if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Neural Network", key="nn_predict"):
        try:
            # ‡πÇ‡∏´‡∏•‡∏î LabelEncoder
            label_encoder = joblib.load('label_encoder.pkl')
            # ‡πÇ‡∏´‡∏•‡∏î Scaler
            scaler = joblib.load('scaler.pkl')
            # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• PyTorch
            model = PlacementNN()
            model.load_state_dict(torch.load('placement_model.pkl', weights_only=False))
            model.eval()

            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• categorical ‡πÄ‡∏õ‡πá‡∏ô numerical
            extracurricular_num = label_encoder.transform([extracurricular])[0]
            placement_training_num = label_encoder.transform([placement_training])[0]

            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• input
            input_data = np.array([[cgpa, internships, projects, workshops, aptitude_score, 
                                   soft_skills, extracurricular_num, placement_training_num, ssc_marks, hsc_marks]])
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡πÄ‡∏Å‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            input_data_scaled = scaler.transform(input_data)

            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Tensor
            input_tensor = torch.tensor(input_data_scaled, dtype=torch.float32)
            
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            with torch.no_grad():
                output = model(input_tensor)
                probability = torch.sigmoid(output).item()
            
            result = "Placed" if probability >= 0.5 else "Not Placed"
            st.success(f"‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: **{result}** (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô: {probability:.2f})")
        except FileNotFoundError as e:
            st.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: {str(e)}. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå 'placement_model.pkl', 'scaler.pkl', ‡πÅ‡∏•‡∏∞ 'label_encoder.pkl' ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {str(e)}")

# CSS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞ tabs ‡πÉ‡∏´‡πâ minimal ‡πÅ‡∏•‡∏∞‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
st.markdown("""
    <style>
    .nav-container {
        background-color: #f9f9f9;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin: 20px 0;
    }
    .stButton > button {
        width: 200px;
        height: 50px;
        background-color: #ffffff;
        border: 1px solid #dcdcdc;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 500;
        color: #333333;
        text-align: center;
        transition: all 0.3s ease;
    }
    .stButton > button:hover {
        background-color: #f0f0f0;
        border-color: #aaaaaa;
    }
    .stButton > button:active {
        background-color: #e0e0e0;
        border-color: #888888;
    }
    .stColumn > div {
        display: flex;
        justify-content: center;
        align-items: center;
    }
    .stTabs [data-baseweb="tab-list"] {
        display: flex;
        justify-content: center;
        background-color: #f9f9f9;
        padding: 10px;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    .stTabs [role="tab"] {
        min-width: 150px;
        background-color: #ffffff;
        border: 1px solid #dcdcdc;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 500;
        color: #333333;
        margin: 0 5px;
        padding: 8px 16px;
        transition: all 0.3s ease;
    }
    .stTabs [role="tab"]:hover {
        background-color: #f0f0f0;
        border-color: #aaaaaa;
    }
    .stTabs [role="tab"][aria-selected="true"] {
        background-color: #e0e0e0;
        border-color: #888888;
        color: #333333;
    }
    .stTabs [data-baseweb="tab-panel"] {
        padding: 20px;
    }
    </style>
""", unsafe_allow_html=True)

# ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å
st.markdown("<h1 style='text-align: center; color: #333;'>Welcome to Placement Prediction App</h1>", unsafe_allow_html=True)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ container
with st.container():
    st.markdown('<div class="nav-container">', unsafe_allow_html=True)
    
    cols = st.columns(3)
    
    with cols[0]:
        if st.button("üî• Data & Development"):
            st.session_state.current_page = "Data & Development"
    
    with cols[1]:
        if st.button("üíÄ Machine Learning Models"):
            st.session_state.current_page = "Machine Learning Models"
    
    with cols[2]:
        if st.button("üò† Neural Network Model"):
            st.session_state.current_page = "Neural Network Model"
    
    st.markdown('</div>', unsafe_allow_html=True)

# ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
if st.session_state.current_page == "Data & Development":
    page1()
elif st.session_state.current_page == "Machine Learning Models":
    page2()
elif st.session_state.current_page == "Neural Network Model":
    page3()